name: CI/CD Pipeline for Java Application

# Trigger the workflow when there is a push or PR to the main branch
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job to build, test, and generate WAR file
  build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up JDK 11 (or use other versions based on your requirement)
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'

      # Step 3: Build the project using Maven
      - name: Build with Maven
        run: |
          mvn clean install -DskipTests

      # Step 4: Run unit tests
      - name: Run tests
        run: mvn test

      # Step 5: Generate the WAR file (if Maven is set to package WAR)
      - name: Generate WAR file
        run: mvn package

  # Job to trigger Jenkins deployment after successful build
  deploy:
    runs-on: ubuntu-latest
    needs: build  # This job runs after the 'build' job is successful
    steps:
      # Step 1: Checkout the repository again (this gives access to the WAR file generated in the previous job)
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Trigger Jenkins deployment job via API
      - name: Trigger Jenkins deployment job
        env:
          JENKINS_URL: ${{ secrets.JENKINS_URL }}  # URL of Jenkins server
          JENKINS_USER: ${{ secrets.JENKINS_USER }}  # Jenkins username
          JENKINS_TOKEN: ${{ secrets.JENKINS_API_TOKEN }}  # Jenkins API token
          WAR_FILE_PATH: target/myapp.war  # The location of the WAR file generated
        run: |
          curl -X POST "$JENKINS_URL/job/deploy-java-to-tomcat/buildWithParameters" \
            --user "$JENKINS_USER:$JENKINS_TOKEN" \
            --data-urlencode "WAR_FILE=$WAR_FILE_PATH"
